@model OnTimeApi.OnTime
@{
    ViewBag.Title = "Index";
}

<div class="container">
	
	<h2>Example API calls</h2>
	<select id="api-call-method">
		<option value="GET">GET</option>
		<option value="POST">POST</option>
	</select>
	<select id="api-call-resource">
		<option value="v1/projects">api/v1/projects</option>
		<option value="v1/projects/{id}">api/v1/projects/{id}</option>
		<option value="v1/defects">api/v1/defects</option>
		<option value="v1/defects/{id}">api/v1/defects/{id}</option>
		<option value="v1/features">api/v1/features</option>
		<option value="v1/features/{id}">api/v1/features/{id}</option>
		<option value="v1/incidents">api/v1/incidents</option>
		<option value="v1/incidents/{id}">api/v1/incidents/{id}</option>
		<option value="v1/tasks">api/v1/tasks</option>
		<option value="v1/tasks/{id}">api/v1/tasks/{id}</option>
	</select>

	<span id="api-call-id-label">id:</span><input type="text" id="api-call-id" value="1" />

	<div id='api-call-payload-container'>
		JSON payload (<a id='api-call-payload-example' href='#'>click to populate with an example</a>)
		<div>
			<textarea id="api-call-payload"></textarea>
		</div>
	</div>

	<div>
		<a href="#" class="btn" id="api-call">Make the API Call</a>
	</div>

	<div>
		<textarea id="api-call-results" disabled="disabled"></textarea>
	</div>


	<h2>Example Attachment Upload</h2>
	<form action="@Model.GetUrl("attachments")" enctype="multipart/form-data" method="post">
	<input type="file" name="file" class="input-file" />
	<input type="submit" value="Upload Attachment" class="btn"/>
	</form>
</div>

<script type="text/javascript">
// hide the id input unless it is needed for the selected API call
var idInputNode = $('#api-call-id'),
	resourceInputNode = $('#api-call-resource');

function toggleIdInputNode() {
	// we show the id input node if the url contains {id}
	var showIdInputNode = resourceInputNode.val().indexOf('{id}') != -1;
	idInputNode.toggle(showIdInputNode);
	$('#api-call-id-label').toggle(showIdInputNode);
}

toggleIdInputNode();
resourceInputNode.change(toggleIdInputNode);

// hide the JSON payload input unless it is needed for the selected API call
var methodInputNode = $('#api-call-method');

function togglePayloadInputNode() {
	// we show the payload input node if the method is POST
	var showPayloadInputNode = methodInputNode.val() === 'POST';
	$('#api-call-payload-container').toggle(showPayloadInputNode);
}

togglePayloadInputNode();
methodInputNode.change(togglePayloadInputNode);

// show example JSON payloads
var payloadInputNode = $('#api-call-payload');

var jsonPayloadExamples = {
	"v1/projects"		: '{\n    name : "Project Created from API Explorer"\n}',
	"v1/projects/{id}"	: '{\n    name : "Project Renamed from API Explorer"\n}',
	"v1/defects"		: '{\n    item: {\n        name : "Defect Created from API Explorer",\n        project: { id: 1 }\n    }\n}',
	"v1/defects/{id}"	: '{\n    item: {\n        name : "Defect Renamed from API Explorer"\n    }\n}',
	"v1/features"		: '{\n    item: {\n        name : "Feature Created from API Explorer",\n        project: { id: 1 }\n    }\n}',
	"v1/features/{id}"	: '{\n    item: {\n        name : "Feature Renamed from API Explorer"\n    }\n}',
	"v1/incidents"		: '{\n    item: {\n        name : "Incident Created from API Explorer",\n        project: { id: 1 }\n    }\n}',
	"v1/incidents/{id}"	: '{\n    item: {\n        name : "Incident Renamed from API Explorer"\n    }\n}',
	"v1/tasks"			: '{\n    item: {\n        name : "Task Created from API Explorer",\n        project: { id: 1 }\n    }\n}',
	"v1/tasks/{id}"		: '{\n    item: {\n        name : "Task Renamed from API Explorer"\n    }\n}'
};

$('#api-call-payload-example').click(function(event) {
	event.preventDefault();

	var resource = resourceInputNode.val();
	payloadInputNode.val(jsonPayloadExamples[resource]);
});

// process API calls

function displayCallResults(jqXHR) {
	var jsonResponse = jqXHR.responseText;
	// try to format the json response
	try {
		var parsedJson = JSON.parse(jsonResponse);
		jsonResponse = JSON.stringify(parsedJson, null, 4);
	}
	catch(e) {}

	$('#api-call-results').val(jqXHR.statusText + "\n\n" + jsonResponse);
}

$('#api-call').click(function(event) {
	event.preventDefault();

	// compose the url, substituting the id if needed
	var url = '@(Url.Action("Proxy"))?resource=' + resourceInputNode.val();
	url = url.replace('{id}', idInputNode.val());
	
	var method = $('#api-call-method').val();

	var settings = {
		dataType: "text",
		type: method,
		success: function(data, textStatus, jqXHR) {
			displayCallResults(jqXHR);
		},
		error: function(jqXHR, textStatus) {
			displayCallResults(jqXHR);
		}
	};

	// send the data if POSTing
	if(method === 'POST') {
		settings.contentType = 'application/json';
		settings.data = payloadInputNode.val();
	}

	// make the call to the Proxy action, which will forward the call to the OnTime API
	$.ajax(url, settings);
});
</script>